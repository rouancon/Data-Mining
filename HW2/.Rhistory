fa.parallel(GID)
library(psych)
fa.parallel(USJudgeRatings)
#--Task A--
library(psych)
fa.parallel(GID)
#--Task B--
principal(GID)
#--Task B--
principal(GID, nfactors=2)
#--Task B--
principal(GID, nfactors=2,rotate="none")
library(psych)
fa.parallel(USJudgeRatings)
library(psych)
fa.parallel(GID)
library(readxl)
GID <- read_excel("Glass Identification Data.xlsx")
View(GID)
library(psych)
fa.parallel(GID)
principal(GID, nfactors=2,rotate="none")
#--Task C--
principal(GID, nfactors=2, rotate="varimax")
pc$scores
pc <- principal(GID, nfactors = 2, rotate="none", scores=TRUE)
pc$scores
pc <- principal(GID, nfactors = 2, rotate="none", scores=TRUE)
head(pc$scores)
pc <- principal(USJudgeRatings)
factor.plot(pc)
pc <- principal(GID)
factor.plot(pc)
pc <- principal(GID, nfactors=2,rotate="none")
factor.plot(pc)
#--Task E--
pc <- principal(GID, nfactors=4,rotate="none")
pc <- principal(GID, nfactors=4,rotate="none")
factor.plot(pc)
pc <- principal(GID, nfactors=2,rotate="none")
factor.plot(pc)
#Problem 3
readRep(prefix, suffix=c(".cor",".rep",".std",".mc.dat"), global=FALSE)
install.packages("PBSadmb")
library("PBSadmb")
herman23 <- readRep(herman23, suffix=c(".cor"), global=FALSE)
library(PBSadmb)
herman23 <- readRep(herman23, suffix=c(".cor"), global=FALSE)
library(readxl)
VCD <- read_excel("Vertebral Column Data.xlsx")
View(VCD)
library(psych)
fa.parallel(VCD)
library(psych)
fa.parallel(GID)
library(psych)
fa.parallel(VCD)
View(VCD)
library(psych)
fa.parallel(VCD[1,6])
View(VCD)
library(psych)
VCD$Class <- NULL
fa.parallel(VCD)
#--Task B--
cmdscale(VCD)
pc <- principal(VCD, nfactors=2, rotate="none")
factor.plot(pc)
library(psych)
VCD$Class <- NULL
fa.parallel(VCD)
pc <- principal(VCD, nfactors=1, rotate="none")
factor.plot(pc)
GID$Class <- NULL
GID$ID <- NULL
#--Task A--
library(psych)
fa.parallel(GID)
#--Task B--
principal(GID, nfactors=2,rotate="none")
library(psych)
fa.parallel(USJudgeRatings)
principal(USJudgeRatings, nfactors=1, rotate="varimax")
library(psych)
principal(USJudgeRatings)
principal(USJudgeRatings, nfactors=1, rotate="varimax")
principal(USJudgeRatings, nfactors=2, rotate="varimax")
library(psych)
principal(USJudgeRatings, nfactors=2, rotate="none")
GID$Class <- NULL
GID$ID <- NULL
library(psych)
fa.parallel(GID)
View(GID)
library(psych)
fa.parallel(GID, fa="PC", n.iter=100)
head(GID)
library(psych)
fa.parallel(GID$cov, fa="PC", n.iter=100)
fa.parallel(GID$cov, fa="PC", n.iter=100)
fa.parallel(GID, fa="PC", n.iter=100)
pc <- principal(GID, nfactors=4, rotate="none")
factor.plot(pc)
#--Task B--
principal(GID, nfactors=4,rotate="none")
source(Herman23.cor)
source("Herman23.cor")
View(Harman23.cor)
View(Harman23.cor)
fa.parallel("Harman23.cor$cov")
fa.parallel("Harman23.cor"$cov)
fa.parallel(Harman23.cor$cov)
fa.parallel(Harman23.cor$cov)
library(psych)
VCD$Class <- NULL
fa.parallel(VCD)
cmdscale(VCD)
View(VCD)
distance <- dist(VCD, method = "euclidean")
cmdscale(distance)
head(cmdscale(distance))
pc <- principal(VCD, nfactors=1, rotate="none")
factor.plot(pc)
distance <- dist(VCD, method = "euclidean")
head(cmdscale(distance))
distance <- dist(VCD, method = "euclidean")
results <- cmdscale(distance)
#--Task C--
factor.plot(results)
#--Task C--
factor.plot(results, title="Plot6")
#--Task C--
factor.plot(results, title="Multi-Dimensional Scaling Results")
distance <- dist(VCD, method = "euclidean")
results <- cmdscale(distance)
view(resuts)
distance <- dist(VCD, method = "euclidean")
results <- cmdscale(distance)
view(resuts)
view(results)
results
head(results)
library(psych)
fa.parallel(USJudgeRatings, fa="PC", n.iter=100)
USJudgeRatings <- read.csv("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW2/US Judge Ratings.dat", sep="")
View(USJudgeRatings)
#--Task A--
library(psych)
fa.parallel(USJudgeRatings, fa="PC", n.iter=100)
library(psych)
fa.parallel(USJudgeRatings)
library(psych)
principal(USJudgeRatings, nfactors=2, rotate="none")
principal(USJudgeRatings, nfactors=2, rotate="varimax")
pc <- principal(USJudgeRatings, scores=TRUE)
pc$scores
pc <- principal(USJudgeRatings, scores=TRUE)
head(pc$scores)
factor.plot(fa.promax())
factor.plot(fa.promax)
#--Task E--
fa.promax <- fa(USJudgeRatings, nfactors=2, rotate="promax", fm="pa")
fa.promax <- fa(USJudgeRatings, nfactors=2, rotate="promax", fm="pa")
factor.plot(fa.promax)
pc <- principal(USJudgeRatings, nfactors=2, rotate="none")
factor.plot(pc)
pc <- principal(USJudgeRatings, nfactors=2, rotate="none")
factor.plot(pc)
library(readxl)
GID <- read_excel("Glass Identification Data.xlsx")
View(GID)
GID$Class <- NULL
GID$ID <- NULL
library(psych)
fa.parallel(GID, fa="PC", n.iter=100)
library(psych)
fa.parallel(GID, fa="PC", n.iter=100)
fa.parallel(GID)
principal(GID, nfactors=4,rotate="none")
principal(GID, nfactors=4, rotate="varimax")
pc <- principal(GID, nfactors = 4, rotate="none", scores=TRUE)
head(pc$scores)
pc <- principal(GID, nfactors=4, rotate="none")
factor.plot(pc)
fa.parallel(Harman23.cor$cov)
harmanpc<-fa(Harman23.cor$cov,nfactors=2, rotate='none')
harmanpc
C--
harmanrc<-fa(Harman23.cor$cov, nfactors=2, rotate='varimax')
harmanrc
harmanrc <- fa(Harman23.cor$cov, nfactors=2, rotate='varimax')
harmanrc
harmanpc<-fa(Harman23.cor$cov, nfactors=2, rotate='none', scores=TRUE, fm='pa')
harmanpc$weights
#--Task D--
harmanpc<-fa(Harman23.cor$cov, nfactors=2, rotate='none', scores=TRUE, fm='pa')
harmanpc$weights
#--Task E--
factor.plot(harmanpc)
fa.diagram(harmanpc)
summary(fit)
women <- read.csv("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/women.R", sep="")
View(women)
view(women)
women <- read.csv("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/women.R", sep="")
View(women)
mtcars <- read.csv("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/mtcars.R", sep="")
View(mtcars)
library(readr)
women <- read_csv("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/women.R")
View(women)
View(women)
View(women)
rm(women)
View(women)
summary(fit)
#Task 2
fit <- lm(weight - height, data='women')
#Task 2
fit <- lm(weight - height, data=women)
#Task 2
fit <- lm(weight - height, data="women")
#Task 2
fit <- lm(weight ~ height, data=women)
fit <- lm(weight ~ height, data=women)
summary(fit)
ConcreteSlumpTestData <- read.table("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/Concrete Slump Test Data.xlsx", header=TRUE, quote="\"")
View(ConcreteSlumpTestData)
library(readxl)
Concrete_Slump_Test_Data <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/Concrete Slump Test Data.xlsx")
View(Concrete_Slump_Test_Data)
View(ConcreteSlumpTestData)
rm(ConcreteSlumpTestData)
View(Concrete_Slump_Test_Data)
#Task 3
#Part A
concrete <- as.data.frame(Concrete_Slump_Test_Data)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
library(car)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
#Part B
Concrete_Slump_Test_Data$No <- NA
concrete <- as.data.frame(Concrete_Slump_Test_Data)
library(car)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
#Task 3
#Part A
Concrete_Slump_Test_Data$No <- NA
View(Concrete_Slump_Test_Data)
concrete <- as.data.frame(Concrete_Slump_Test_Data)
library(car)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
#Task 3
#Part A
Concrete_Slump_Test_Data$No <- NULL
concrete <- as.data.frame(Concrete_Slump_Test_Data)
library(car)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
summary(concrete)
lm(formula=cement ~ slag + Fly Ash + Water + SP + Coarse Aggregate + Fine Aggregate + Slump + Slump Flow + 28-day Compressive Strength, data=concrete)
cor(concrete)
lm(formula=cement ~ slag + Fly Ash + Water + SP + Coarse Aggregate + Fine Aggregate + Slump + Slump Flow + 28-day Compressive Strength, data=concrete)
lm(formula=cement ~ slag + 'Fly Ash' + Water + SP + Coarse Aggregate + Fine Aggregate + Slump + Slump Flow + 28-day Compressive Strength, data=concrete)
lm(formula=cement ~ slag + 'Fly Ash' + Water + SP + 'Coarse Aggregate' + 'Fine Aggregate' + Slump + 'Slump Flow' + '28-day Compressive Strength', data=concrete)
lm(formula=cement ~ slag + Fly.Ash + Water + SP + Coarse.Aggregate + Fine.Aggregate + Slump + Slump.Flow + 28-day.Compressive.Strength, data=concrete)
lm(formula=Cement ~ Slag + Fly.Ash + Water + SP + Coarse.Aggregate + Fine.Aggregate + Slump + Slump.Flow + 28-day.Compressive.Strength, data=concrete)
View(Concrete_Slump_Test_Data)
rm(Concrete_Slump_Test_Data)
rm(concrete)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
Concrete_Slump_Test_Data <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/Concrete Slump Test Data.xlsx")
View(Concrete_Slump_Test_Data)
#Task 3
#Part A
Concrete_Slump_Test_Data$No <- NULL
concrete <- as.data.frame(Concrete_Slump_Test_Data)
library(car)
scatterplotMatrix(concrete, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
cor(concrete)
lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + day_Compressive_Strength, data=concrete)
lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + Compressive_Strength, data=concrete)
lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + Compressive_Strength, data=concrete)
lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + Compressive_Strength, data=concrete)
odel <- lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + Compressive_Strength, data=concrete)
ols_step_best_subset(model)
model <- lm(formula=Cement ~ Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate + Slump + Slump_Flow + Compressive_Strength, data=concrete)
summary(model)
model <- lm(formula=Slump ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Slump_Flow ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Slump ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Slump_Flow ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Slump_Flow ~ Cement + Slag + Fly_Ash + Water + SP + Coarse_Aggregate + Fine_Aggregate, data=concrete)
summary(model)
model <- lm(formula=Slump_Flow ~., data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~., data=concrete)
summary(model)
model <- lm(formula=Slump_Flow ~., data=concrete)
summary(model)
model <- lm(formula=Slump ~., data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~., data=concrete)
summary(model)
cor(concrete)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
cor(concrete)
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water, data=concrete)
summary(model)
#Part B
cor(concrete)
model <- lm(formula=Compressive_Strength ~ 4*Cement + Water, data=concrete)
summary(model)
cor(concrete)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
cor(concrete)
model <- lm(formula=Compressive_Strength ~ 4*Cement + Water, data=concrete)
summary(model)
cor(concrete)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
#Part B
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
#Part B
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + (Water^2), data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + I(Water^2), data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + Coarse_Aggregate + (Fly_Ash^2), data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + Coarse_Aggregate + I(Fly_Ash^2), data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ (Cement^2) + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
summary(model)
model <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
summary(model)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
par(mfrow=c(2,2))
plot(fit)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
#qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
crpots(fit)
h
library(car)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
#qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
crpots(fit)
library(car)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
#qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
crPlots(fit)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
qqplot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
qqPlot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(1,1))
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
qqPlot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(readxl)
Forest_Fires_Data <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW3/Forest Fires Data.xlsx")
View(Forest_Fires_Data)
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
#Task 4
#Part A
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
View(Forest_Fires_Data)
View(Forest_Fires_Data)
#Task 4
#Part A
Forest_Fires_Data$Month <- NULL
Forest_Fires_Data$Day <- NULL
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + I(FFMC^2) + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + FFMC + I(DC^2), data=fires)
summary(model)
^2)
^2)
summary(model)
model <- lm(formula=Area ~ I(Cement^2) + Water, data=fires)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC ISI + Temp + RH + Wind + Rain, data=fires)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + RH + Wind + I(Rain^2), data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + RH + I(Wind^2) + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + I(RH^2) + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + (Temp^2) + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + (ISI^2) + Temp + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + I(DMC^2) + DC + ISI + Temp + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + RH + Wind + I(Rain^2), data=fires)
summary(model)
summary(model)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
plot(Area)
plot(Forest_Fires_Data$Area)
plot(Forest_Fires_Data$Area, model)
View(model)
View(fit)
plot(Forest_Fires_Data$Area, model.fitted.values)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ model$fitted.values, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
fit <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
par(mfrow=c(2,2))
plot(fit)
library(car)
par(mfrow=c(1,1))
fit <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
qqPlot(fit, labels=row.names(fires), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(2,2))
qqPlot(fit, labels=row.names(fires), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(2,2))
crPlots(fit)
