summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + I(RH^2) + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + (Temp^2) + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + (ISI^2) + Temp + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + I(DMC^2) + DC + ISI + Temp + RH + Wind + Rain, data=fires)
summary(model)
model <- lm(formula=Area ~ X + Y + FFMC + DMC + DC + ISI + Temp + RH + Wind + I(Rain^2), data=fires)
summary(model)
summary(model)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
plot(Area)
plot(Forest_Fires_Data$Area)
plot(Forest_Fires_Data$Area, model)
View(model)
View(fit)
plot(Forest_Fires_Data$Area, model.fitted.values)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ model$fitted.values, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ I(Rain^2) + FFMC + DC, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
model <- lm(formula=Area ~ FFMC + DC, data=fires)
summary(model)
model <- lm(formula=Area ~ Rain + model$fitted.values, data=fires)
summary(model)
plot(Forest_Fires_Data$Area, model$fitted.values)
fit <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
par(mfrow=c(2,2))
plot(fit)
library(car)
par(mfrow=c(1,1))
fit <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
qqPlot(fit, labels=row.names(fires), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(2,2))
qqPlot(fit, labels=row.names(fires), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(2,2))
crPlots(fit)
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model)
summary(model)
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model)
summary(model)
View(model)
View(model)
#Task 4
#Part A
Forest_Fires_Data$Month <- NULL
Forest_Fires_Data$Day <- NULL
fires <- as.data.frame(Forest_Fires_Data)
fires <- log(fires)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model$model$area)
#Task 4
#Part A
Forest_Fires_Data$Month <- NULL
Forest_Fires_Data$Day <- NULL
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model$model$area)
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model$model.Area)
model <- log(model.model$Area)
model <- log(model$Area)
model[["model"]][["Area"]]
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model <- log(model[["model"]][["Area"]])
summary(model)
#Part B
model <- lm(formula=Area ~ Rain + FFMC + DC, data=fires)
model[["model"]][["Area"]] <- log(model[["model"]][["Area"]])
summary(model)
model <- lm(formula=Compressive_Strength ~ Cement + Water + I(Coarse_Aggregate^2) + Fly_Ash, data=concrete)
summary(model)
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
par(mfrow=c(2,2))
plot(fit)
#Model 2
library(car)
par(mfrow=c(1,1))
fit <- lm(formula=Compressive_Strength ~ I(Cement^2) + Water + Coarse_Aggregate + Fly_Ash, data=concrete)
qqPlot(fit, labels=row.names(concrete), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
par(mfrow=c(2,2))
crPlots(fit)
#Task 4
#Part A
Forest_Fires_Data$Month <- NULL
Forest_Fires_Data$Day <- NULL
fires <- as.data.frame(Forest_Fires_Data)
library(car)
scatterplotMatrix(fires, spread=FALSE, lty.smooth=2, main="Scatter Plot Matrix")
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
#Part B
model <- lm(formula=Area ~ X + DMC + ISI + Temp + RH + Wind, data=fires)
model[["model"]][["Area"]] <- log(model[["model"]][["Area"]])
summary(model)
model <- lm(formula=Area ~ X + DMC + ISI + Temp + RH + Wind, data=fires)
summary(model)
model <- lm(formula=Area ~ X + DMC + ISI + Temp + RH + Wind, data=fires)
summary(model)
model <- lm(formula=Area ~ log(X + DMC + ISI + Temp + RH + Wind), data=fires)
summary(model)
model <- lm(formula=Area ~ log(X) + log(DMC) + log(ISI) + log(Temp) + log(RH) + log(Wind), data=fires)
summary(model)
model <- lm(formula=Area ~ X + DMC + ISI + Temp + RH + Wind, data=fires)
summary(model)
cor(fires)
model <- lm(formula=Area ~., data=fires)
summary(model)
model <- lm(formula=Area ~ X + DMC + ISI + Temp + RH + Wind, data=fires)
summary(model)
library(readxl)
UniversalBank_train <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW4/UniversalBank-train.xlsx")
View(UniversalBank_train)
library(readxl)
UniversalBank_val <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW4/UniversalBank-val.xlsx",
sheet = "Data")
View(UniversalBank_val)
View(UniversalBank_train)
View(UniversalBank_train)
library(readxl)
UniversalBank_train <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW4/UniversalBank-train.xlsx")
View(UniversalBank_train)
library(readxl)
UniversalBank_val <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW4/UniversalBank-val.xlsx")
View(UniversalBank_val)
library(readxl)
UniversalBank_val <- read_excel("~/Documents/GitHub/DataMining-HW1/Data-Mining/HW4/UniversalBank-val.xlsx",
sheet = "Data")
View(UniversalBank_val)
#Problem 1
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_train
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
#create model
knn(UniversalBank_train, UniversalBank_val, k = 1, l = 0, prob = FALSE, use.all = TRUE)
install.packages(class)
install.packages('class')
#Problem 1
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_train
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
#create model
library(class)
knn(UniversalBank_train, UniversalBank_val, k = 1, l = 0, prob = FALSE, use.all = TRUE)
View(test)
View(test)
kNN(UniversalBank_train, UniversalBank_val, k = 1, l = 0, prob = FALSE, use.all = TRUE)
View(test)
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_train
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
#create model
library(class)
cl <- factor()
knn(personal_loan -., UniversalBank_train, UniversalBank_val, norm = FALSE, k=1)
knn(personal_loan -., UniversalBank_train, UniversalBank_val, 1)
cl <- factor()
knn(personal_loan -., UniversalBank_train, UniversalBank_val, 1)
View(test)
View(train)
knn(personal_loan, UniversalBank_train, UniversalBank_val, 1)
knn(UniversalBank_train$personal_loan, UniversalBank_train, UniversalBank_val, 1)
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- UniversalBank_val$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
train <- UniversalBank_train
test <- UniversalBank_val
cl <- UniversalBank_val$personal_loan
cl = cl[,1]
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
dim(cl)
cl <- UniversalBank_val$personal_loan
dim(cl)
cl = cl[,1]
cl <- cl[,1]
cl <- cl[1,]
cl <- [1,UniversalBank_val$personal_loan]
cl <- [UniversalBank_val$personal_loan,1]
cl <- t(cl)
t(cl)
knn(train, test, cl, k=1)
#HW 4
#Connor Rouan and Yadukrishnan Sethumadhavan
#Problem 1
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- UniversalBank_val$personal_loan
t(cl)
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
cl
cl <- UniversalBank_val$personal_loan
cl
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
#Part A
remove(concrete)
remove(fit)
remove(fires)
remove(odel)
remove(model)
remove(Forest_Fires_Data)
remove(Concrete_Slump_Test_Data)
remove(cl)
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
cl
print(cl)
remove(cl)
olumns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
#Part A
t(cl)
#Connor Rouan and Yadukrishnan Sethumadhavan
#Problem 1
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
t(cl)
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
t(cl)
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, cl, k=1)
View(train)
test <- UniversalBank_val
cl <- test$personal_loan
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
cl <- factor()
knn(train, test, test$personal_loan, k=1)
#Problem 1
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
#create model
library(class)
knn(train, test, test$personal_loan, k=1)
knn(train, test, cl, k=1)
umns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
knn(train, test, cl, k=1)
#Part A
s
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
knn(train, test, cl, k=1)
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#create model
library(class)
model <- knn(train, test, cl, k=1)
install.packages(gmodels)
install.packages('gmodels')
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#normalize the data
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
train_n <- as.data.frame(lapply(train, normalize))
test_n <- as.data.frame(lapply(test, normalize))
#create model
library(class)
model <- knn(train_n, test_n, cl, k=1)
cl
#remove ID/zip code columns
train <- UniversalBank_train
test <- UniversalBank_val
cl <- train$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#normalize the data
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
train_n <- as.data.frame(lapply(train, normalize))
test_n <- as.data.frame(lapply(test, normalize))
#create model
library(class)
model <- knn(train_n, test_n, cl, k=1)
cl
model
library(gmodels)
crossTable(x=cl, y=model)
library(gmodels)
CrossTable(x=cl, y=model)
View(model)
train <- UniversalBank_train
test <- UniversalBank_val
cl_train <- train$personal_loan
cl_test <- test$personal_loan
train$ID <- NULL
test$ID <- NULL
train$zip <- NULL
test$zip <- NULL
train$personal_loan <- NULL
test$personal_loan <- NULL
#normalize the data
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
train_n <- as.data.frame(lapply(train, normalize))
test_n <- as.data.frame(lapply(test, normalize))
#create model
library(class)
model <- knn(train_n, test_n, cl_train, k=1)
#test performance
library(gmodels)
CrossTable(x=cl_test, y=model)
